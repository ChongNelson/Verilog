`timescale 1ns / 1ps
module main(stopTime, Sys_Clk, C, AN, DP, aud_sd, audioOut, alarm_LED, alarm_sw, alarm_toggle, button_sec_add, button_sec_sub, button_min_add, button_min_sub); //LED);
    input stopTime, alarm_sw, alarm_toggle;
    input button_sec_add, button_sec_sub, button_min_add, button_min_sub;
    input Sys_Clk;
    output [6:0] C;
    output [7:0] AN;
    output DP;
    output audioOut;
    output wire aud_sd;
    output wire alarm_LED;
    wire Outsignal_1;
    wire Outsignal_400;
    wire Outsignal_B;
    wire [5:0] sec;
    wire [5:0] min;
    wire [5:0] alarm_sec;
    wire [5:0] alarm_min;
    wire alarm;
    wire [2:0] Q;
    wire [6:0] D0;
    wire [6:0] D1;
    wire [6:0] D2;
    wire [6:0] D3;
    wire [6:0] D4;
    wire [6:0] D5;
    wire [6:0] D6;
    wire [6:0] D7;
    
    assign DP = 1;
    assign aud_sd = 1'b1;
    
    seven_seg_display my_display (sec, min, alarm_sec, alarm_min, D0, D1, D2, D3, D4, D5, D6, D7);
    mux8to1 myMux (D0, D1, D2, D3, D4, D5, D6, D7, Q, C);
    ClkGen1Hz my_1Hzclock (Sys_Clk, stopTime, Outsignal_1);
    ClkGen400Hz my_400Hzclock (Sys_Clk, stopTime, Outsignal_400);
    ClkGenButton my_ButtonClock (Sys_Clk, stopTime, Outsignal_B);
    decoder3to8 myDecoder (Outsignal_400, Q, AN);
    countOneHour myOneHourCounter (Outsignal_1, sec, min);
    alarm_settings alarmMechanics (Sys_Clk, alarm, alarm_LED, alarm_sw, alarm_sec, alarm_min, sec, min);
    alarm_setup toggleAlarmTime (alarm_sec, alarm_min, alarm_toggle, button_sec_add, button_sec_sub, button_min_add, button_min_sub, Outsignal_B);
    SongPlayer rickroll (Sys_Clk, audioOut, alarm, alarm_sec, alarm_min, sec, min, alarm_sw);

endmodule


module decoder3to8 (Clock, Q, AN);//, Reset); 
    input Clock;
    output reg [2:0] Q;
    output reg [7:0] AN;
    
    always @(posedge Clock) 
    begin
    Q <= Q+ 1;
        if (Q == 3'b000)
            begin
                AN[0]=0; AN[1]=1; AN[2]=1; AN[3]=1; AN[4]=1; AN[5]=1; AN[6]=1; AN[7]=1;
            end
        if (Q == 3'b001)
            begin
                AN[0]=1; AN[1]=0; AN[2]=1; AN[3]=1; AN[4]=1; AN[5]=1; AN[6]=1; AN[7]=1;
            end
        if (Q == 3'b010)
            begin
                AN[0]=1; AN[1]=1; AN[2]=0; AN[3]=1; AN[4]=1; AN[5]=1; AN[6]=1; AN[7]=1;
            end
        if (Q == 3'b011)
            begin
                AN[0]=1; AN[1]=1; AN[2]=1; AN[3]=0; AN[4]=1; AN[5]=1; AN[6]=1; AN[7]=1;
            end
        if (Q == 3'b100)
            begin
                AN[0]=1; AN[1]=1; AN[2]=1; AN[3]=1; AN[4]=0; AN[5]=1; AN[6]=1; AN[7]=1;
            end    
        if (Q == 3'b101)
            begin
                AN[0]=1; AN[1]=1; AN[2]=1; AN[3]=1; AN[4]=1; AN[5]=0; AN[6]=1; AN[7]=1;
            end    
        if (Q == 3'b110)
            begin
                AN[0]=1; AN[1]=1; AN[2]=1; AN[3]=1; AN[4]=1; AN[5]=1; AN[6]=0; AN[7]=1;
            end    
        if (Q == 3'b111)
            begin
                AN[0]=1; AN[1]=1; AN[2]=1; AN[3]=1; AN[4]=1; AN[5]=1; AN[6]=1; AN[7]=0;
            end
    end
endmodule 

module ClkGen1Hz(clk, stopTime, outsignal);
    input clk;
    input stopTime;
    output outsignal;
    reg [26:0] counter;  
    reg outsignal;
    
    always @ (posedge clk)
        begin
	       if (stopTime)
	           begin
		          counter=0;
		          outsignal=0;
	           end
	       else
    begin
	   counter = counter +1;
	       if (counter == 50_000_000)
		      begin
			     outsignal=~outsignal;
			     counter = 0;
		      end
        end
    end
endmodule

module ClkGen400Hz(clk, stopTime, outsignal);
    input clk;
    input stopTime;
    output outsignal;
    reg [26:0] counter;  
    reg outsignal;
    
    always @ (posedge clk)
        begin
	       if (stopTime)
	           begin
		          counter=0;
		          outsignal=0;
	           end
	       else
    begin
	   counter = counter +1;
	       if (counter == 125_000)
		      begin
			     outsignal=~outsignal;
			     counter =0;
		      end
        end
    end
endmodule

module ClkGenButton(clk, stopTime, outsignal);
    input clk;
    input stopTime;
    output outsignal;
    reg [26:0] counter;  
    reg outsignal;
    always @ (posedge clk)
        begin
	       if (stopTime)
	           begin
		          counter=0;
		          outsignal=0;
	           end
	       else
    begin
	   counter = counter +1;
	       if (counter == 9_375_000)
		      begin
			     outsignal=~outsignal;
			     counter = 0;
		      end
        end
    end
endmodule

module countOneHour(Clock, seconds, minutes);
	input Clock;
    output reg [5:0] seconds;
    output reg [5:0] minutes;

	always @(posedge Clock)
	begin
	   if(minutes == 6'd59)
	       begin
	           minutes <=0;
           end
       if(seconds == 6'd59)
           begin
               seconds <= 0;
               minutes <= minutes + 1;
           end
       else
           begin
               seconds <= seconds + 1;
           end
	end
endmodule

module mux8to1 (Seg0, Seg1, Seg2, Seg3, Seg4, Seg5, Seg6, Seg7, Q, f);
    input [6:0] Seg0;   //Modified the 4x1 mux to be 8x1 to accomodate for
    input [6:0] Seg1;   //the last 4 seven segment displays
    input [6:0] Seg2;
    input [6:0] Seg3;
    input [6:0] Seg4;
    input [6:0] Seg5;
    input [6:0] Seg6;
    input [6:0] Seg7;
    input [2:0] Q;
    output reg [6:0] f;
    
    always @(Seg0, Seg1, Seg2, Seg3, Seg4, Seg5, Seg6, Seg7, Q)
        begin
            if (Q== 3'b000)  //When display value is a certain bit...
                f <= Seg0;          //Turn on that specific seven segment display
            else if (Q== 3'b001)
                f <= Seg1;
            else if (Q== 3'b010)
                f <= Seg2;
            else if (Q== 3'b011)
                f <= Seg3;
            else if (Q== 3'b100)
                f <= Seg4;
            else if (Q== 3'b101)
                f <= Seg5;
            else if (Q== 3'b110)
                f <= Seg6;
            else if (Q== 3'b111)
                f <= Seg7;
        end
endmodule

    
module alarm_settings (clock, alarm, alarm_LED, alarm_sw, alarm_sec, alarm_min, clock_sec, clock_min);
    input clock, alarm_sw;
    input wire [5:0] alarm_sec;
    input wire [5:0] alarm_min;
    input wire [5:0] clock_sec;
    input wire [5:0] clock_min;
    output reg alarm;
    output reg alarm_LED;
    
    always @ (posedge clock)
        begin
        
            if(!alarm_sw)
                begin
                    alarm_LED <= 0;
                end
            else
                begin
                    alarm_LED <= 1;
                end
            if (clock_sec == alarm_sec && clock_min == alarm_min)
                begin
                    if(alarm_sw) 
                        alarm <=1;
                end
            if (!alarm_sw)
                alarm <=0;                     
        end  
endmodule

module alarm_setup (alarm_sec, alarm_min, alarm_toggle, button_sec_add, button_sec_sub, button_min_add, button_min_sub, clock);
    input alarm_toggle, clock;
    input button_sec_add, button_sec_sub;
    input button_min_add, button_min_sub;
    output reg [5:0] alarm_sec;
    output reg [5:0] alarm_min;
    
    always@(posedge clock)
        begin
            if(!alarm_toggle) 
                begin
                    alarm_sec <= alarm_sec;
                    alarm_min <= alarm_min;
                end
            else
                begin
                    if(button_sec_add == 0)
                        begin
                            alarm_sec <= alarm_sec;
                        end
                    else
                        begin 
                            if(alarm_sec == 6'd59)
	                           begin
	                               alarm_sec = 6'd0;
                                end
                            else
                                begin
                                    alarm_sec = alarm_sec + 1;
                                end
                        end                
                    if(button_min_add == 0)
                        begin
                            alarm_min <= alarm_min;
                        end
                    else
                        begin 
                            if(alarm_min == 6'd59)
	                           begin
	                               alarm_min = 6'd0;
                                end
                            else
                                begin
                                    alarm_min = alarm_min + 1;
                                end
                        end
                end
        end
endmodule

module seven_seg_display (sec, min, alarm_sec, alarm_min, D0, D1, D2, D3, D4, D5, D6, D7);
    input wire [5:0] sec;
    input wire [5:0] min;
    input wire [5:0] alarm_sec;
    input wire [5:0] alarm_min;
    output reg [6:0] D0;
    output reg [6:0] D1;
    output reg [6:0] D2;
    output reg [6:0] D3;
    output reg [6:0] D4;
    output reg [6:0] D5;
    output reg [6:0] D6;
    output reg [6:0] D7;
    
    always@*
        begin
            case(alarm_min/6'd10)
                6'd0: D0=7'b0000001; //0
                6'd1: D0=7'b1001111; //1
                6'd2: D0=7'b0010010; //2
                6'd3: D0=7'b0000110; //3
                6'd4: D0=7'b1001100; //4
                6'd5: D0=7'b0100100; //5 
                6'd6: D0=7'b0100000; //6
                6'd7: D0=7'b0001111; //7
                6'd8: D0=7'b0000000; //8
                6'd9: D0=7'b0001100; //9
                default: D0=7'b0000001; //default
            endcase
            case(sec%6'd10)
                6'd0: D1=7'b0000001; //0
                6'd1: D1=7'b1001111; //1
                6'd2: D1=7'b0010010; //2
                6'd3: D1=7'b0000110; //3
                6'd4: D1=7'b1001100; //4
                6'd5: D1=7'b0100100; //5 
                6'd6: D1=7'b0100000; //6
                6'd7: D1=7'b0001111; //7
                6'd8: D1=7'b0000000; //8
                6'd9: D1=7'b0001100; //9
                default: D1=7'b0000001; //default
            endcase
            case(sec/6'd10)
                6'd0: D2=7'b0000001; //0
                6'd1: D2=7'b1001111; //1
                6'd2: D2=7'b0010010; //2
                6'd3: D2=7'b0000110; //3
                6'd4: D2=7'b1001100; //4
                6'd5: D2=7'b0100100; //5 
                6'd6: D2=7'b0100000; //6
                6'd7: D2=7'b0001111; //7
                6'd8: D2=7'b0000000; //8
                6'd9: D2=7'b0001100; //9
                default: D2=7'b0000001; //default
            endcase
            case(min%6'd10)
                6'd0: D3=7'b0000001; //0
                6'd1: D3=7'b1001111; //1
                6'd2: D3=7'b0010010; //2
                6'd3: D3=7'b0000110; //3
                6'd4: D3=7'b1001100; //4
                6'd5: D3=7'b0100100; //5 
                6'd6: D3=7'b0100000; //6
                6'd7: D3=7'b0001111; //7
                6'd8: D3=7'b0000000; //8
                6'd9: D3=7'b0001100; //9
                default: D3=7'b0000001; //default
            endcase
            
            //Top is clock, Bottom is alarm
            
            case(min/6'd10)
                6'd0: D4=7'b0000001; //0
                6'd1: D4=7'b1001111; //1
                6'd2: D4=7'b0010010; //2
                6'd3: D4=7'b0000110; //3
                6'd4: D4=7'b1001100; //4
                6'd5: D4=7'b0100100; //5 
                6'd6: D4=7'b0100000; //6
                6'd7: D4=7'b0001111; //7
                6'd8: D4=7'b0000000; //8
                6'd9: D4=7'b0001100; //9
                default: D4=7'b0000001; //default
            endcase
            case(alarm_sec%6'd10)
                6'd0: D5=7'b0000001; //0
                6'd1: D5=7'b1001111; //1
                6'd2: D5=7'b0010010; //2
                6'd3: D5=7'b0000110; //3
                6'd4: D5=7'b1001100; //4
                6'd5: D5=7'b0100100; //5 
                6'd6: D5=7'b0100000; //6
                6'd7: D5=7'b0001111; //7
                6'd8: D5=7'b0000000; //8
                6'd9: D5=7'b0001100; //9
                default: D5=7'b0000001; //default
            endcase
            case(alarm_sec/6'd10)
                6'd0: D6=7'b0000001; //0
                6'd1: D6=7'b1001111; //1
                6'd2: D6=7'b0010010; //2
                6'd3: D6=7'b0000110; //3
                6'd4: D6=7'b1001100; //4
                6'd5: D6=7'b0100100; //5 
                6'd6: D6=7'b0100000; //6
                6'd7: D6=7'b0001111; //7
                6'd8: D6=7'b0000000; //8
                6'd9: D6=7'b0001100; //9
                default: D6=7'b0000001; //default
            endcase
            case(alarm_min%6'd10)
                6'd0: D7=7'b0000001; //0
                6'd1: D7=7'b1001111; //1
                6'd2: D7=7'b0010010; //2
                6'd3: D7=7'b0000110; //3
                6'd4: D7=7'b1001100; //4
                6'd5: D7=7'b0100100; //5 
                6'd6: D7=7'b0100000; //6
                6'd7: D7=7'b0001111; //7
                6'd8: D7=7'b0000000; //8
                6'd9: D7=7'b0001100; //9
                default: D7=7'b0000001; //default
            endcase
        end
endmodule



module MusicSheet( input [9:0] number, 
	output reg [19:0] note,//max ? different musical notes
	output reg [4:0] duration);

parameter   QUARTER = 5'b00010;//1 beat
parameter	HALF = 5'b00100;//2 beats
parameter	WHOLE = 2* HALF;//4 beats
parameter	TWO_WHOLE = 2* WHOLE;//8 beats
parameter	FOUR_WHOLE = 2* TWO_WHOLE;//16 beats

parameter   EIGHTH = 5'b00001;//0.5 beat

parameter   SP = 1;  //Rest
parameter   A3 = 113636, A4_sharp = 107296, B4 = 101214, C4 = 95602, C4_sharp = 90253, D4 = 85179, D4_sharp = 80386, E4 = 75872, F4 = 71633, F4_sharp = 67567, G4 = 63775, G4_sharp = 60240, A4 = 56818;
parameter   B5 = 50607, C5 = 47801;

always @ (number) begin
case(number) //Rickroll

0: begin note = C4; duration = EIGHTH;   end //Nev-
1: begin note = D4; duration = EIGHTH;   end //er
2: begin note = F4; duration = EIGHTH;   end //gon-
3: begin note = D4; duration = EIGHTH;   end //na

4: begin note = A4; duration = QUARTER;   end //give
5: begin note = SP; duration = EIGHTH;   end 
6: begin note = A4; duration = QUARTER;   end //you
7: begin note = SP; duration = EIGHTH;   end
8: begin note = G4; duration = QUARTER;   end //up
9: begin note = G4; duration = HALF;   end
10: begin note = C4; duration = EIGHTH;   end //nev-
11: begin note = D4; duration = EIGHTH;   end //er
12: begin note = F4; duration = EIGHTH;   end //gon-
13: begin note = D4; duration = EIGHTH;   end //na

14: begin note = G4; duration = QUARTER;   end //let
15: begin note = SP; duration = EIGHTH;   end
16: begin note = G4; duration = QUARTER;   end //you
17: begin note = SP; duration = EIGHTH;   end
18: begin note = F4; duration = QUARTER;   end //down
19: begin note = F4; duration = EIGHTH;   end //*tie*
20: begin note = E4; duration = EIGHTH;   end 
21: begin note = D4; duration = QUARTER;   end
22: begin note = C4; duration = EIGHTH;   end //nev-
23: begin note = D4; duration = EIGHTH;   end //er
24: begin note = F4; duration = EIGHTH;   end //gon-
25: begin note = D4; duration = EIGHTH;   end //na

26: begin note = F4; duration = HALF;   end //run
27: begin note = G4; duration = QUARTER;   end //a-
28: begin note = E4; duration = QUARTER;   end //round
29: begin note = E4; duration = EIGHTH;   end //*tie*
30: begin note = D4; duration = EIGHTH;   end 
31: begin note = C4; duration = HALF;   end 
32: begin note = SP; duration = EIGHTH;   end 
33: begin note = C4; duration = QUARTER;   end //and de-

34: begin note = G4; duration = HALF;   end //sert
35: begin note = F4; duration = WHOLE;   end //you
36: begin note = C4; duration = EIGHTH;   end //nev-
37: begin note = D4; duration = EIGHTH;   end //er
38: begin note = F4; duration = EIGHTH;   end //gon-
39: begin note = D4; duration = EIGHTH;   end //na

40: begin note = A4; duration = QUARTER;   end //make
41: begin note = SP; duration = EIGHTH;   end 
42: begin note = A4; duration = QUARTER;   end //you
43: begin note = SP; duration = EIGHTH;   end
44: begin note = G4; duration = QUARTER;   end //cry
45: begin note = G4; duration = HALF;   end
46: begin note = C4; duration = EIGHTH;   end //nev-
47: begin note = D4; duration = EIGHTH;   end //er
48: begin note = F4; duration = EIGHTH;   end //gon-
49: begin note = D4; duration = EIGHTH;   end //na

50: begin note = C5; duration = HALF;   end //say
51: begin note = E4; duration = QUARTER;   end //good
52: begin note = F4; duration = QUARTER;   end //bye
53: begin note = F4; duration = EIGHTH;   end //*tie*
54: begin note = E4; duration = EIGHTH;   end //
55: begin note = D4; duration = QUARTER;   end //
56: begin note = C4; duration = EIGHTH;   end //nev-
57: begin note = D4; duration = EIGHTH;   end //er
58: begin note = F4; duration = EIGHTH;   end //gon-
59: begin note = D4; duration = EIGHTH;   end //na

60: begin note = F4; duration = HALF;   end //tell
61: begin note = G4; duration = QUARTER;   end //a
62: begin note = E4; duration = QUARTER;   end //lie
63: begin note = E4; duration = EIGHTH;   end //*tie*
64: begin note = D4; duration = EIGHTH;   end 
65: begin note = C4; duration = HALF;   end 
66: begin note = SP; duration = EIGHTH;   end 
67: begin note = C4; duration = QUARTER;   end //and

68: begin note = G4; duration = HALF;    end //hurt
69: begin note = F4; duration = WHOLE;   end //you
70: begin note = SP; duration = HALF;    end 

default: 	begin note = SP; duration = QUARTER;  end
endcase
end
endmodule

module SongPlayer(clock, audioOut, alarm, alarm_sec, alarm_min, clock_sec, clock_min, alarm_sw);
input clock;
input alarm_sw;
output reg audioOut;
output reg alarm;
output reg [5:0] alarm_sec;
output reg [5:0] alarm_min;
output reg [5:0] clock_sec;
output reg [5:0] clock_min;
reg [19:0] counter;
reg [31:0] time1, noteTime;
reg [9:0] msec, number;	//millisecond counter, and sequence number of musical note.
wire [4:0] note, duration;
wire [19:0] notePeriod;
parameter clockFrequency = 100_000_000; 

MusicSheet 	mysong(number, notePeriod, duration);

always @ (posedge clock) 
begin
            if(!alarm)
                begin
                    number <= 0;
                end
            else  
                begin
                    counter <= counter + 1; 
                    time1<= time1+1;
                        if(counter >= notePeriod) 
                            begin
                                counter <=0;  
                                audioOut <= ~audioOut ; 
                            end	//toggle audio output 	
                        if( time1 >= noteTime) 
                            begin	
				                time1 <=0;  
                                number <= number + 1; 
                            end  //play next note
                        if(number == 71) number <=0; // Make the number reset at the end of the song
                end
//	     end
end

always @(duration) noteTime = duration * clockFrequency / 8; 
       //number of   FPGA clock periods in one note.
endmodule
